<application>
  <component name="HistoryState">
    <option name="history">
      <History />
    </option>
    <option name="jsonBlob" value="{&quot;items&quot;:[{&quot;id&quot;:&quot;da8ad2e9-34b1-4225-ac0d-b79aedf9835d&quot;,&quot;title&quot;:&quot;      const x = event.clientX + delta.x - over.rect.left;\n\n\nAdd javadoc\n&quot;,&quot;systemPrompt&quot;:&quot;You are an expert AI programmer which writes code documentation to explain code to other developers.\n\n- Add documentation for explaining non-obvious things\n- Do not write comments which are obvious in the code\n- ONLY WRITE DOCS\n- DO NOT EXPLAIN THE CODE\n- Use Chinese Comment&quot;,&quot;timestamp&quot;:1683809964477,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;      const x = event.clientX + delta.x - over.rect.left;\n\n\nAdd javadoc\n&quot;},{&quot;role&quot;:&quot;system&quot;,&quot;content&quot;:&quot;/**\n * 计算x坐标值，将鼠标光标位置的clientX值加上delta.x值，并减去over.rect.left值。\n * \n * @param {MouseEvent} event - 鼠标事件对象，包含clientX属性。\n * @param {number} delta.x - 偏移量，用于调整x值。\n * @param {DOMRect} over.rect - 包含元素的矩形对象，用于获取元素的左侧位置。\n * \n * @returns {number} - 返回计算后的x坐标值。\n */&quot;}]},{&quot;id&quot;:&quot;3dfcf96f-e9dd-4a42-a044-3861721572c7&quot;,&quot;title&quot;:&quot;Explain code: \n\nconst Demo = () =&gt; {\n  const { styles } = useStyles();\n  return (\n    &lt;div className...&quot;,&quot;systemPrompt&quot;:&quot;You are an expert AI programmer and an expert in explaining code to medior and junior programmers.\n\n- Explain the code in concise sentences\n- Provide examples when possible to explain what the code does&quot;,&quot;timestamp&quot;:1688744156377,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;Explain code: \n\nconst Demo = () =&gt; {\n  const { styles } = useStyles();\n  return (\n    &lt;div className={styles.button}&gt;\n      &lt;Button&gt;按钮&lt;/Button&gt;\n    &lt;/div&gt;\n  );\n};&quot;},{&quot;role&quot;:&quot;system&quot;,&quot;content&quot;:&quot;This code is a functional component called \&quot;Demo\&quot;. It uses the \&quot;useStyles\&quot; hook to access the \&quot;styles\&quot; object. It renders a div with a CSS class based on the \&quot;styles.button\&quot; property, and inside the div, it renders a button with the text \&quot;按钮\&quot;.&quot;}]},{&quot;id&quot;:&quot;d066d52f-1560-40be-966f-f734d5784011&quot;,&quot;title&quot;:&quot;Explain code: \n\nconst Demo = () =&gt; {\n  const { styles } = useStyles();\n  return (\n    &lt;div className...&quot;,&quot;systemPrompt&quot;:&quot;You are an expert AI programmer and an expert in explaining code to medior and junior programmers.\n\n- Explain the code in concise sentences\n- Provide examples when possible to explain what the code does\n\n所有回答需要使用中文&quot;,&quot;timestamp&quot;:1688744187698,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;Explain code: \n\nconst Demo = () =&gt; {\n  const { styles } = useStyles();\n  return (\n    &lt;div className={styles.button}&gt;\n      &lt;Button&gt;按钮&lt;/Button&gt;\n    &lt;/div&gt;\n  );\n};&quot;},{&quot;role&quot;:&quot;system&quot;,&quot;content&quot;:&quot;这段代码是一个React函数组件，名为Demo。它使用了一个名为useStyles的自定义钩子函数，通过解构赋值获取了styles对象。然后，它返回一个包含一个div和一个Button组件的JSX元素。div的className属性使用了styles.button作为样式类名，用于应用样式。最后，Button组件显示了一个名为\&quot;按钮\&quot;的文本。&quot;}]},{&quot;id&quot;:&quot;a2d4705a-538e-4bd0-bb7c-626f46c174ec&quot;,&quot;title&quot;:&quot;Create a unit test for : \n\nexport const safeStartTransition = (func: TransitionFunction) =&gt; {\n  if (...&quot;,&quot;systemPrompt&quot;:&quot;You are an expert AI programmer which uses unit tests to verify behavior.\n\n- Write unit tests for the obvious cases\n- Write unit tests for the edge cases\n- DO NOT EXPLAIN THE TEST&quot;,&quot;timestamp&quot;:1688744250718,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;Create a unit test for : \n\nexport const safeStartTransition = (func: TransitionFunction) =&gt; {\n  if (typeof startTransition === 'function') {\n    startTransition(func);\n  } else {\n    func();\n  }\n};\n&quot;},{&quot;role&quot;:&quot;system&quot;,&quot;content&quot;:&quot;import { safeStartTransition } from './yourModule';\n\ndescribe('safeStartTransition', () =&gt; {\n  it('should call startTransition with the given function if it exists', () =&gt; {\n    const startTransition = jest.fn();\n    const func = jest.fn();\n    \n    safeStartTransition(func);\n    \n    expect(startTransition).toHaveBeenCalledWith(func);\n    expect(func).not.toHaveBeenCalled();\n  });\n\n  it('should call the given function if startTransition does not exist', () =&gt; {\n    const func = jest.fn();\n    global.startTransition = undefined;\n    \n    safeStartTransition(func);\n    \n    expect(func).toHaveBeenCalled();\n  });\n\n  it('should not throw an error if startTransition is not a function', () =&gt; {\n    const func = jest.fn();\n    global.startTransition = 'notAFunction';\n    \n    expect(() =&gt; safeStartTransition(func)).not.toThrow();\n  });\n});&quot;}]}]}" />
  </component>
</application>